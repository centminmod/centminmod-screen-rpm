name: Build Screen RPM

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: ['almalinux:8', 'almalinux:9']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up AlmaLinux container
      run: |
        docker pull ${{ matrix.os }}
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ${{ matrix.os }} /bin/bash -c "
          dnf install -y epel-release &&
          if [[ ${{ matrix.os }} == 'almalinux:8' ]]; then
            dnf config-manager --set-enabled powertools;
            export PATH=/usr/bin:$PATH;
            export AUTOCONF=/usr/bin/autoconf27;
            export AUTOHEADER=/usr/bin/autoheader27;
          else
            dnf config-manager --set-enabled crb;
            export PATH=/opt/rh/autoconf271/bin:$PATH;
            export AUTOCONF=/opt/rh/autoconf271/bin/autoconf;
            export AUTOHEADER=/opt/rh/autoconf271/bin/autoheader;
          fi &&
          dnf groupinstall 'Development Tools' -y &&
          dnf install -y \
            screen \
            wget \
            m4 \
            rpmdevtools \
            rpm-build \
            $(if [[ ${{ matrix.os }} == 'almalinux:9' ]]; then echo 'autoconf-latest.noarch'; else echo 'autoconf2.7x'; fi) \
            ncurses-devel \
            pam-devel \
            gettext-devel \
            systemd-devel \
            gcc-toolset-13-annobin-annocheck \
            gcc-toolset-13-annobin-docs.noarch \
            gcc-toolset-13-annobin-plugin-gcc \
            gcc-toolset-13-binutils \
            gcc-toolset-13-binutils-devel \
            gcc-toolset-13-dwz \
            gcc-toolset-13-gcc \
            gcc-toolset-13-gcc-c++ \
            gcc-toolset-13-gcc-gfortran \
            gcc-toolset-13-gdb \
            gcc-toolset-13-libasan-devel \
            gcc-toolset-13-libatomic-devel \
            gcc-toolset-13-libgccjit \
            gcc-toolset-13-libgccjit-devel \
            gcc-toolset-13-libgccjit-docs \
            gcc-toolset-13-libitm-devel \
            gcc-toolset-13-liblsan-devel \
            gcc-toolset-13-libquadmath-devel \
            gcc-toolset-13-libstdc++-devel \
            gcc-toolset-13-libtsan-devel \
            gcc-toolset-13-libubsan-devel \
            gcc-toolset-13-runtime --skip-broken &&
          rpmdev-setuptree &&
          cp /etc/pam.d/screen ~/rpmbuild/SOURCES/screen.pam &&
          wget https://ftp.gnu.org/gnu/screen/screen-5.0.0.tar.gz -P ~/rpmbuild/SOURCES/ &&
          cp /workspace/screen.spec ~/rpmbuild/SPECS/ &&
          mkdir -p /home/screentmp &&
          chmod 1777 /home/screentmp &&
          export TMPDIR=/home/screentmp &&
          source /opt/rh/gcc-toolset-13/enable &&
          time rpmbuild -ba ~/rpmbuild/SPECS/screen.spec &&
          cp ~/rpmbuild/RPMS/x86_64/screen-*.rpm /workspace/
        "

    - name: Set custom artifact name
      run: echo "ARTIFACT_NAME=screen-rpm-${{ matrix.os }}" >> $GITHUB_ENV

    - name: Upload RPM
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: screen-*.rpm
        if-no-files-found: warn
        compression-level: 0
        overwrite: false
